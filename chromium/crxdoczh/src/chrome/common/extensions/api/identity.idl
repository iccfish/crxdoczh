// Copyright (c) 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// TODO(courage): documentation.
namespace identity {

  [nodoc] dictionary TokenDetails {
    // <!--@Whether to prompt the user to log in or grant scope permissions (if they
    // have not already done so). Default is false.-->
    // 是否要提示用户登录或者授予部分权限（如果还没有做的话），默认为
    // false。
    boolean? interactive;
  };

  [nodoc] dictionary InvalidTokenDetails {
    // <!--@The specific token that should be removed from the cache.-->
    // 应该从缓存中移除的某个令牌。
    DOMString token;
  };

  [nodoc] dictionary WebAuthFlowDetails {
    // <!--@The URL that initiates the auth flow.-->
    // 开始认证流程的 URL。
    DOMString url;

    // <!--@Whether to launch auth flow in interactive mode. Default is false.-->
    // 是否要以交互模式执行认证流程，默认为 false。
    boolean? interactive;
  };

  [nodoc] callback GetAuthTokenCallback = void (optional DOMString token);
  [nodoc] callback InvalidateAuthTokenCallback = void ();
  [nodoc] callback LaunchWebAuthFlowCallback = void (optional DOMString responseUrl);

  interface Functions {
    // <!--@Gets an OAuth2 access token as specified by the manifest.-->
    // 获取如清单文件中所指定的 OAuth2 访问令牌。
    //
    // |details| : <!--@Token options.-->
    // 令牌选项。
    // |callback| : <!--@Called with an OAuth2 access token as specified by the
    // manifest, or undefined if there was an error.-->
    // 调用时传递清单文件中指定的 OAuth2 访问令牌，如果发生错误则为
    // undefined。
    [nodoc] static void getAuthToken(optional TokenDetails details,
                                     GetAuthTokenCallback callback);

    // <!--@Removes an OAuth2 access token from the Identity API's token cache.
    // When an access token is discovered to be invalid, it should be
    // passed to removeCachedAuthToken to remove it from the cache. The
    // app may then retrieve a fresh token with getAuthToken.-->
    // 从认证 API 的令牌缓存中移除 OAuth2
    // 访问令牌。发现某个访问令牌无效后，应该将它传递给
    // removeCachedAuthToken 将它从缓存中移除，接着应用可以使用 getAuthToken
    // 获取新的令牌。
    //
    // |details| : Token information.
    // |callback| : Called when the token has been removed from the cache.
    [nodoc] static void removeCachedAuthToken(
        InvalidTokenDetails details, InvalidateAuthTokenCallback callback);

    // <!--@Starts an auth flow at the specified URL.-->
    // 在指定 URL 开始认证流程。
    //
    // |details| : <!--@WebAuth flow options.-->
    // WebAuth 流程选项。
    // |callback| : <!--@Called with the URL redirected back to your application.-->
    // 调用时传递重定向回您的应用程序的 URL。
    [nodoc] static void launchWebAuthFlow(WebAuthFlowDetails details,
                                          LaunchWebAuthFlowCallback callback);
  }
  ;
};
